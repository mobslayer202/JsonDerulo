operator overloading []
- access and edit branches

Parse json file
- create json data structure from json file
- automatically type cast?

Json data structure
- create json
- output json file



What is json?
    Data types: string, number, boolean, null, Array, object (key value pairs)
    Can only store in Array or Object so, if want organize lot of data, use those.

    Object:
        -keys and values must be separated by double quotes
        -key value pairs separated by comma
        -keys must be strings


Data structure idea:
- std::string - string
- int - number w/o decimal
- double - number w/ decimal
- std::vector - Array
- std::unordered_map - Object
# Need to make a variant which can be any of the possible types
# Or a Tagged Union if that doesnt work
# or without special variant ds?

Idea 1: 
Parse json
Store types as a variant
- VariantX stores type vector<variantX>
    - need to define vector<variantX> to make variantX
    - need to define variantX to make vector<variantX>
    - BRUH

Idea 2:
Different data types in Json have different qualities.
    - qualities hold for the immediate scope of the data type -- not deeper into nested data types
Qualities:
Object: 
    - key and value separated by ':'
    - key-value pairs separated by ','
    - strings as keys
    -- values all json data types
    # randomness in value
    # shown by open and close {}
Array:
    - each element separated by ','
    -- elements all json data types
    # shown by open and close []
String:
    - meaningful json characters lose meaning within scope
    -- all characters allowed
    # shown by open and close ""
Number:
    -- only numberical characters, '-' or '.'
    ## outside everything, inside array, inside object value
boolean / null:
    - only true or false / only null

Need to know which data type i'm currently in
- keep track using stack GENIUS

Implement error detection and parse separately?



