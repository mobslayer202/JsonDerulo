std::getline returns the input stream
    - the while loop terminates because when end of file is reached an EOF flag is set on the stream, loop evaluates to false

switch case statements:
    not putting 'break;' at a case will make execution fall through to consecutive cases.
        - the reason why you can have multiple cases which do the same task w/o copying task over

std::getline(stream, output) termination:
    -when it sees an EOF, the stream will set a flag.
        -still possible to get new values in output (all values after previous call and up to EOF)
            -subsequent calls will not put anything into output

need to define static member variables outside of class but within "same namespace scope" of class - GPT

Reference return of operator++:
    enum class MyEnum {
        First,
        Second,
        Third,
        Count  // Always keep this as the last element
    };

    MyEnum& operator++(MyEnum& e) {
        if (e != MyEnum::Count) {
            e = static_cast<MyEnum>(static_cast<int>(e) + 1);
        }
        return e;
    }
Allows it to be used "immediately": (MyEnum d = ++e;) - GPT
The param makes it clear you incrementing MyEnum - GPT
    - FAKE NEWS, NO PARAM ALLOWED EXCEPT INT!!!

Handlers should return types not JsonVal

The only time JsonVal is used (to wrap data type) is in top level, array element, or object value
When Handlers called on to get value they should return the unwrapped type
    - Called in Object key (unwrapped string)
    - Called in HandlerHelper.handleAny (unwrapped types to be wrapped in JsonVal)

HandlerHelper.handleAny now is only thing which handles JsonVal as it should
    - bc JsonVal is meant to hold any type
    - handleAny() only thing that handles any type

Handler structure mimics data structure
    - handler for each data type
    - handlerhelper to handle JsonVal 

std::variant stores all possible data types as separate members
    - more memory than union

Don't put parenthesis to default-initialize
    EX: ClassName objectName; 

question:
why isspace take int and return int? should take char and return bool no?
why don't handle() functions red squiggly when no return?
for (arrIter; arrIter < (**value).end(); arrIter++){ // Why ++ and <? not .next() and !=

Complexities:
data structure to represent the Json is weird
Algorithm
How best to structure code